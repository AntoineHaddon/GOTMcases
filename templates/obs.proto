!$Id: obs.proto,v 1.1.1.1 2003/03/11 13:38:58 kbk Exp $
!-------------------------------------------------------------------------------
! 
!-------------------------------------------------------------------------------
! observed or prescribed salinity profiles
!
! s_prof_method    -> method to create initial or observed salinity profiles
!                  0: no initial values, S-equation is not solved
!                  1: use analytically prescribed initial profile
!                  2: read profiles at different dates from "s_prof_file"
!                     and interpolate to GOTM timestep
!
! s_analyt_method  -> method to create analytically precribed inital profile
!                  1: set profile to constant value s_1
!                  2: set "two layer" stratification (see user's guide)
!                  3: set profile with constant N^2 (see user's guide)
!                     This option can only be used toghether with
!                     t_analyt_method=1 (constant temperature).
!
! z_s1             -> upper layer thickness if s_analyt_method=2
!
! s_1              -> constant salinity     if s_analyt_method=1
!                     upper layer salinity  if s_analyt_method=2
!                     surface salinity      if s_analyt_method=3
!
! z_s2             -> depth of top of lower layer if s_analyt_method=2
!
! s_2              -> lower layer salinity if s_analyt_method=2
!
! s_obs_NN         -> constant value N^2 corresponding to salinity profile
!                     if s_analyt_method=3

! s_prof_file      -> filename of file with salinity profiles
!                     if s_prof_method=2
!
! The computed profiles can be relaxed towards observed or prescribed
! profiles with a certain relaxation time. If you do not want relaxation,
! set the relaxation times to 1.e15 (something large). It is possible to choose
! different relaxation times in a surface and bottom layer.
!
! SRelaxTauM       -> relaxation time for bulk of the flow 
! SRelaxTauB       -> relaxation time for bottom layer 
! SRelaxTauS       -> relaxation time for surface layer
! SRelaxBott       -> height of bottom relaxation layer
!                     (set to 0. if not used)
! SRelaxSurf       -> height of surface relaxation layer
!                     (set to 0. if not used)
!
!-------------------------------------------------------------------------------
 &sprofile
  s_prof_method=   s_prof_method_sed
  s_analyt_method= s_analyt_method_sed
  z_s1=            z_s1_sed
  s_1=             s_1_sed
  z_s2=            z_s2_sed
  s_2=             s_2_sed
  s_obs_NN=        s_obs_NN_sed
  s_prof_file=     s_prof_file_sed
  SRelaxTauM=      SRelaxTauM_sed
  SRelaxTauB=      SRelaxTauB_sed
  SRelaxTauS=      SRelaxTauS_sed
  SRelaxBott=      SRelaxBott_sed
  SRelaxSurf=      SRelaxSurf_sed
 /

!-------------------------------------------------------------------------------
! observed or prescribed potential temperature profiles
!
! t_prof_method    -> method to create initial or observed temperature profiles
!                  0: no initial values, T-equation is not solved
!                  1: use analytically prescribed initial profile
!                  2: read profiles at different dates from "t_prof_file"
!                     and interpolate to GOTM timestep
!
! t_analyt_method  -> method to create analytically precribed inital profile
!                  1: set profile to constant value s_1
!                  2: set "two layer" stratification (see user's guide)
!                  3: set profile with constant N^2 (see user's guide)
!                     This option can only be used toghether with
!                     s_analyt_method=1 (constant salinity).
!
! z_t1             -> upper layer thickness if t_analyt_method=2
!
! t_1              -> constant temperature     if t_analyt_method=1
!                     upper layer temperature  if t_analyt_method=2
!                     surface temperature      if t_analyt_method=3
!
! z_t2             -> depth of top of lower layer if t_analyt_method=2
!
! t_2              -> lower layer temperature if t_analyt_method=2
!
! t_obs_NN         -> constant value N^2 corresponding to temperature profile
!                     if t_analyt_method=3

! t_prof_file      -> filename of file with temperature profiles
!                     if t_prof_method=2
!
! The computed profiles can be relaxed towards observed or prescribed
! profiles with a certain relaxation time. If you do not want relaxation,
! set the relaxation times to 1.e15 (something large). It is possible to choose
! different relaxation times in a surface and bottom layer.
!
! TRelaxTauM       -> relaxation time for bulk of the flow 
! TRelaxTauB       -> relaxation time for bottom layer 
! TRelaxTauS       -> relaxation time for surface layer
! TRelaxBott       -> height of bottom relaxation layer
!                     (set to 0. if not used)
! TRelaxSurf       -> height of surface relaxation layer
!                     (set to 0. if not used)
!
!-------------------------------------------------------------------------------
 &tprofile
  t_prof_method=   t_prof_method_sed
  t_analyt_method= t_analyt_method_sed
  z_t1=            z_t1_sed
  t_1=             t_1_sed
  z_t2=            z_t2_sed
  t_2=             t_2_sed
  t_obs_NN=        t_obs_NN_sed
  t_prof_file=     t_prof_file_sed
  TRelaxTauM=      TRelaxTauM_sed
  TRelaxTauB=      TRelaxTauB_sed
  TRelaxTauS=      TRelaxTauS_sed
  TRelaxBott=      TRelaxBott_sed
  TRelaxSurf=      TRelaxSurf_sed
 /

!-------------------------------------------------------------------------------
! external pressure gradients
!
! ext_press_method -> method to compute external pressure gradient from data
!                  0: constant external pressure gradient
!                  1: external pressure gradient from tidal constituents
!                  2: external pressure gradient from data
!                     found in "ext_press_file". 
!                  The data supplied from 0-2 are interpreted differently
!                  depending on the value of "ext_press_mode" !
!
!
! ext_press_mode   -> how to interprete ANY prescribed data for 
!                     the computation of the external pressure gradient
!                  0: interprete all data as surface elevation gradients
!                  1: interprete all data as current meter measurements
!                     at a given height "PressHeight" 
!                     (see documentation)
!                  2: interprete all data as vertically averaged current speeds
!                     (see documentation)
!
! ext_press_file   -> filename of input file for ext_press_method=2. 
!                     The data in the file are interpreted according to the 
!                     value of "ext_press_mode".
!
! PressConstU      -> constant pressure gradient data for x-direction for 
!                     ext_press_method=0. The value is interpreted according to
!                     the value of "ext_press_mode".
!
! PressConstV      -> constant pressure gradient data for y-direction for 
!                     ext_press_method=0. The value is interpreted according to
!                     the value of "ext_press_mode".
!
! PressHeight      -> height above bottom for current meter observations
!                     (only used for ext_press_mode=1)
!
! The following data specify the tidal constituents for ext_press_method=1. The
! tidal amplitudes are interpreted according to the value of "ext_press_mode".
!
! PeriodM          -> period of 1. harmonic (eg. M2-tide)
! AmpMu            -> u amplitude of 1. harmonic
! AmpMv            -> v amplitude of 1. harmonic
! PhaseMu          -> u phase of 1. harmonic
! PhaseMv          -> v phase of 1. harmonic
! PeriodS          -> period of 2. harmonic (eg. S2-tide)
! AmpSu            -> v amplitude of 2. harmonic
! AmpSv            -> v amplitude of 2. harmonic
! PhaseSu          -> v phase of 2. harmonic
! PhaseSv          -> v phase of 2. harmonic
!
!-------------------------------------------------------------------------------
 &ext_pressure
  ext_press_method=ext_press_method_sed
  ext_press_mode=  ext_press_mode_sed
  ext_press_file=  ext_press_file_sed
  PressConstU=     PressConstU_sed
  PressConstV=     PressConstV_sed
  PressHeight=     PressHeight_sed
  PeriodM=         PeriodM_sed
  AmpMu=           AmpMu_sed
  AmpMv=           AmpMv_sed
  PhaseMu=         PhaseMu_sed
  PhaseMv=         PhaseMv_sed
  PeriodS=         PeriodS_sed
  AmpSu=           AmpSu_sed
  AmpSv=           AmpSv_sed
  PhaseSu=         PhaseSu_sed
  PhaseSv=         PhaseSv_sed
 /

!-------------------------------------------------------------------------------
! internal pressure gradients
!
!
! int_press_method -> method to compute internal pressure gradient from data
!                  0: no internal pressure gradient
!                  1: vertically and temporally constant internal pressure 
!                     gradient computed from fixed horizontal salinity and 
!                     temperature gradients
!                  2: vertically and temporally variable int. pressure gradient
!                     computed from data in file "int_press_file"
!
! int_press_file   -> file with profiles of dsdx,dsdy,dtdx,dtdy 
!                     (only read for int_press_method=2)
!
! const_dsdx       -> x-gradient of S [psu/m] for int_press_method=1
! const_dsdy       -> y-gradient of S [psu/m] for int_press_method=1
! const_dtdx       -> x-gradient of T [K/m]   for int_press_method=1
! const_dtdy       -> y-gradient of T [K/m]   for int_press_method=1
!
! For all values of "int_press_method", it can be specified if 
! the given temperature and salinity gradients should also be taken into 
! account in the lateral advection terms of temperature and salinity.
!
! s_adv             -> advection of salinity    (.true./.false.)
! t_adv             -> advection of temperature (.true./.false.)
!
!-------------------------------------------------------------------------------
 &int_pressure
  int_press_method=int_press_method_sed
  int_press_file=  int_press_file_sed
  const_dsdx=      const_dsdx_sed
  const_dsdy=      const_dsdy_sed
  const_dtdx=      const_dtdx_sed
  const_dtdy=      const_dtdy_sed
  s_adv=           s_adv_sed
  t_adv=           t_adv_sed
 /

!-------------------------------------------------------------------------------
! Light extinction - Jerlov type or from file
!
! extinct_method   -> which method used to compute the extinction coefficient
!                  0: from file
!                  1: Jerlov type I
!                  2: Jerlov type 1 (upper 50 m)
!                  3: Jerlov type IA
!                  4: Jerlov type IB
!                  5: Jerlov type II
!                  6: Jerlov type III
!                  7: Adolf Stips, Lago Maggiore 
! 
! extinct_file     -> name of file used if extinct_method=0
!
!-------------------------------------------------------------------------------
 &extinct
  extinct_method=  extinct_method_sed
  extinct_file=    extinct_file_sed
 /

!-------------------------------------------------------------------------------
! vertical advection
!
! It is possible to specify a vertical advection velocity. All fields (except 
! the turbulence quantities) are then vertically advected with this velocity,
! for example to mimic the effect of horizontal divergence leading to vertical
! velocities. The profiles of vertical velocity are determined by two values,
! the height of maximum absolute value of vertical velocity, w_height, and the
! vertical velocity at this height, w_adv. From w_height, the vertical velocity
! is linearly decreasing towards the surface and the bottom, where is value
! is zero.
!  
! w_adv_method     -> method to specify the vertical advection velocity
!                  0: zero vertical advection velocity
!                  1: temporally constant vertical advection velocity profile
!                  2: temporally varying vertical advection velocity profile
!                     with "w_adv" and "w_height" both read in from file 
!                     "w_adv_file")
!
! w_adv_height0    -> constant height of maximum absolute value of vertical 
!                     advection velocity
!
! w_adv0           -> constant vertical advection velocity for 
!                     w_adv_method=1

! w_adv_file       -> filename for file with "w_height" and "w_adv"
!                     (for w_adv_method=2)
!
! w_adv_discr      -> method to discretize the vertical advection term    
!                  1: first order upstream
!                  2: second-order polynomial (P2)
!                  3: third-order polynomial  (P3)
!                  4: TVD with Superbee limiter
!                  5: TVD with MUSCL limiter
!                  6: TVD with ULTIMATE QUICKEST
!
!-------------------------------------------------------------------------------
 &w_advspec
  w_adv_method=    w_adv_method_sed
  w_adv_height0=   w_adv_height0_sed
  w_adv0=          w_adv0_sed
  w_adv_file=      w_adv_file_sed
  w_adv_discr=     w_adv_discr_sed
 /

!-------------------------------------------------------------------------------
! sea surface elevations
!
! Varying sea surface elevations can be specified, where the depth of the water
! column in GOTM will vary, for example to account for water level 
! fluctuations in tidally influenced estuaries.
!
! zeta_method      -> method to prescribe the sea surface elevation
!                  0: constant sea surface elevation 
!                  1: sea surface elevation from tidal constituents
!                  2: sea surface elevation from file
!
! zeta_file        -> filename for file with sea surface elevations
!                     (if zeta_method=2)
!
! zeta0            -> constant value for sea surface elevation
!                     (if zeta_method=0)
!
! The following 6 variables are used only if zeta_method=1
! period1          -> period of 1. harmonic (eg. M2-tide) - [s]
! amp1             -> amplitude of 1. harmonic  - [m]
! phase1           -> phase of 1. harmonic - [s]
! period2          -> period lsof 2. harmonic (eg. S2-tide) - [s]
! amp2             -> amplitude of 2. harmonic  - [m]
! phase2           -> phase of 2. harmonic - [s]
!
!-------------------------------------------------------------------------------
 &zetaspec
  zeta_method=     zeta_method_sed
  zeta_file=       zeta_file_sed
  zeta_0=          zeta_0_sed
  period_1=        period_1_sed
  amp_1=           amp_1_sed
  phase_1=         phase_1_sed
  period_2=        period_2_sed
  amp_2=           amp_2_sed
  phase_2=         phase_2_sed
 /

!-------------------------------------------------------------------------------
! wind waves
!
! Wind induced waves can be specified. Used in e.g. the spm module to account 
! for wave-current interaction.
!
! wave_method      -> method to prescribe the wind waves
!                  0: nothing is done - all varibles equal 0
!                  1: constant values
!                  2: time varying variables read from file
!
! wave_file        -> filename for file wind waves
!                     (if wave_method=2)
!
! The following variables are used if wave_method=1
! Hs               -> constant value for significant wave-height
! Tz               -> constant value for mean zero-crossing period
! phiw             -> constant value for mean zero-crossing period
!-------------------------------------------------------------------------------
 &wave_nml
  wave_method=     wave_method_sed
  wave_file=       wave_file_sed
  Hs=              Hs_sed
  Tz=              Tz_sed
  phiw=            phiw_sed
 /

!-------------------------------------------------------------------------------
! observed or prescribed velocity profiles
!
! vel_prof_method  -> method to create initial or observed velocity profiles
!                  0: start from zero inital velocities
!                  1: (not implemented)
!                  2: read profiles at different dates from "vel_prof_file"
!                     and interpolate to GOTM timestep
!
! vel_prof_file    -> filename of file with u- and v profiles
!                     if vel_prof_method=2
!
! vel_relax_tau    -> relaxation time for velocity in
!                      (set to 1.e15 s for no relaxation)
!
!  vel_relax_ramp  -> duration of initial relaxation in [s]
!                     (set to 1.e15 for constant relaxation)
!
!-------------------------------------------------------------------------------
 &velprofile
  vel_prof_method= vel_prof_method_sed
  vel_prof_file=   vel_prof_file_sed
  vel_relax_tau=   vel_relax_tau_sed
  vel_relax_ramp=  vel_relax_ramp_sed
 /

!-------------------------------------------------------------------------------
! turbulent dissipation rate profiles
!
! e_prof_method    -> method to create initial or observed dissipation profiles
!                  0: no observed dissipation rate profiles
!                  1: (not implemented)
!                  2: read profiles at different dates from "e_prof_file"
!                     and interpolate to GOTM timestep
!
! e_obs_const      -> a constant filling value [W/kg]
!
! e_prof_file      -> filename of file with dissipation rate profiles
!                     if e_prof_method=2
!
!-------------------------------------------------------------------------------
 &eprofile
  e_prof_method=   e_prof_method_sed
  e_obs_const=     e_obs_const_sed
  e_prof_file=     e_prof_file_sed
 /

!-------------------------------------------------------------------------------
! prescibred inital profile and inital surface boundary conditions for the 
! dynamic buoyancy equation (only used if buoy_method=2 in gotmrun.inp) 
!
! b_obs_surf       -> prescribed initial buoyancy at the surface
! b_obs_NN         -> prescribed initial value of N^2 (=buoyancy gradient)
! b_obs_sbf        -> prescribed constant surface buoyancy flux
!
!-------------------------------------------------------------------------------
 &bprofile
  b_obs_surf=      b_obs_surf_sed
  b_obs_NN=        b_obs_NN_sed
  b_obs_sbf=       b_obs_sbf_sed
 /

!-------------------------------------------------------------------------------
! observed oxygen profiles
!
! o2_prof_method   -> method to create initial or observed oxygen profiles
!                  0: no observed oxygen rate profiles
!                  1: (not used)
!                  2: read profiles at different dates from "o2_prof_file"
!                     and interpolate to GOTM timestep
!
! o2_unit          -> which unit are the observations reported in
!                  0: saturation (%)
!                  1: mmol/m3 ???
!                  2: ml/m3 ???
!
! o2_prof_file     -> filename of file with oxygen profiles
!                     if o2_prof_method=2
!
!-------------------------------------------------------------------------------
 &o2_profile
  o2_prof_method=o2_prof_method_sed
  o2_units=o2_units_sed
  o2_prof_file=o2_prof_file_sed
 /

!-------------------------------------------------------------------------------
! observed biological profiles
!
! bio_prof_method   -> method to create initial or observed oxygen profiles
!                  <=2: use values from bio namlists
!                  2: read profiles at different dates from "bio_prof_file"
!                     and interpolate to GOTM timestep
!
! bio_prof_file     -> filename of file with biological profiles
!                     if bio_prof_method=2
!
!-------------------------------------------------------------------------------
 &bioprofiles
  bio_prof_method=bio_prof_method_sed
  bio_prof_file=bio_prof_file_sed
 /
